# General Description:
# - Any key that is specific for a plot type will begin with `ts` for timeseries, `ty` for taylor.
# - Some keys/groups are optional.
# - For now, all plots except time series average over the analysis window.
# - Seting axis values
#   - If set_axis = True in data_proc section of each plot_grp,
#     the yaxis for the plot will be set based on the values
#     specified in the obs section for each variable.
#   - If set_axis is set to False, then defaults will be used.
#   - 'vmin_plot' and 'vmax_plot' are needed for
#     'timeseries', 'spatial_overlay', and 'boxplot'.
#   - 'vdiff_plot' is needed for 'spatial_bias' plots
#   - 'ty_scale' is needed for 'taylor' plots.
#   - 'nlevels' or the number of levels used in the contour plot can also optionally be provided for spatial_overlay plot.
#   - If set_axis = True and the proper limits are not provided in the obs section,
#     a warning will print, and the plot will be created using the default limits.
analysis:
  start_time: "2019-09-05-06:00:00" # UTC
  end_time: "2019-09-06-06:00:00" # UTC
  output_dir: ./output/airnow_wrfchem  # relative to the program using this control file
  # ^ optional; if not specified, plots are stored in code directory (??)
  #   Currently, the directory must exist or plot saving will error and fail.
  debug: True

model:
  RACM_ESRL: # model label
    files: example:wrfchem:racm_esrl
    mod_type: "wrfchem"
    mod_kwargs:
      mech: "racm_esrl_vcp"
      surf_only_nc: True  # specify that we have only one vertical level; WRF-Chem specific
    radius_of_influence: 12000 # meters
    mapping: # of _model_ species name to _obs_ species name
      airnow: # specifically for the obs labeled 'airnow'
        PM2_5_DRY: "PM2.5"
        o3: "OZONE"
    projection: None
    plot_kwargs: # optional
      color: "magenta"
      marker: "s"
      linestyle: "-"
  RACM_ESRL_VCP:
    files: example:wrfchem:racm_esrl_vcp
    mod_type: "wrfchem"
    mod_kwargs:
      mech: "racm_esrl_vcp"
      surf_only_nc: True
    radius_of_influence: 12000
    mapping:
      airnow:
        PM2_5_DRY: "PM2.5"
        o3: "OZONE"
    projection: None
    plot_kwargs:
      color: "gold"
      marker: "o"
      linestyle: "-"

obs:
  airnow: # obs label
    use_airnow: True
    filename: example:airnow:2019-09
    obs_type: pt_sfc
    variables: # optional
      OZONE:
        unit_scale: 1
        # ^ optional; Scaling factor
        unit_scale_method: "*"
        # ^ optional; Multiply = '*' , Add = '+', subtract = '-', divide = '/'
        nan_value: -1.0
        # ^ optional; When loading data, set this value to NaN
        ylabel_plot: "Ozone (ppbv)"
        # optional; set ylabel in order to include units and/or other info
        vmin_plot: 15.0
        # ^ optional; Min for y-axis during plotting.
        #   To apply to a plot, change restrict_yaxis = True.
        vmax_plot: 55.0
        # ^ optional; Max for y-axis during plotting.
        #   To apply to a plot, change restrict_yaxis = True.
        vdiff_plot: 20.0
        # ^ optional; +/- range to use in bias plots.
        #   To apply to a plot, change restrict_yaxis = True.
        nlevels_plot: 21
        # ^ optional; number of levels used in colorbar for contourf plot.
      PM2.5:
        unit_scale: 1
        unit_scale_method: "*"
        # obs_min: 0
        # ^ optional; set all values less than this value to NaN
        # obs_max: 100
        # ^ optional; set all values greater than this value to NaN
        nan_value: -1.0
        # Note: The obs_min, obs_max, and nan_values are set to NaN first
        # and then the unit conversion is applied.
        ylabel_plot: "PM2.5 (ug/m3)"
        ty_scale: 2.0 # optional; `ty_` indicates for Taylor diagram plot
        vmin_plot: 0.0
        vmax_plot: 22.0
        vdiff_plot: 15.0
        nlevels_plot: 23

plots:
  plot_grp1:
    type: "timeseries" # plot type
    fig_kwargs: # optional; to define figure options
      figsize: [12, 6] # figure size (width, height) in inches
    default_plot_kwargs:
      # ^ optional; Define defaults for all plots.
      #   Important: Model kwargs overwrite these.
      linewidth: 2.0
      markersize: 10.
    text_kwargs: # optional
      fontsize: 24.
    domain_type: ["all", "state_name", "epa_region"]
    # ^ List of domain types: 'all' or any domain in obs file.
    #   (e.g., airnow: epa_region, state_name, siteid, etc.)
    domain_name: ["CONUS", "CA", "R9"]
    # ^ List of domain names. If domain_type = all,
    #   the domain name is used in the plot title.
    data: ["airnow_RACM_ESRL", "airnow_RACM_ESRL_VCP"]
    # ^ make this a list of pairs in obs_model
    #   where the obs is the obs label and model is the model_label
    data_proc: # optional??
      rem_obs_nan: True
      # ^ True: Remove all points where model or obs variable is NaN.
      #   False: Remove only points where model variable is NaN.
      ts_select_time: "time_local"  # `ts_` indicates this is time series plot-specific
      # ^ Time used for avg and plotting
      #   Options: 'time' for UTC or 'time_local'
      ts_avg_window: "H"
      # ^ Options: None for no averaging, pandas resample rule (e.g., 'H', 'D')
      set_axis: True
      # ^ If true, add `vmin_plot` and `vmax_plot` for each variable in obs.

  plot_grp2:
    type: "taylor"
    fig_kwargs:
      figsize: [8, 8]
    default_plot_kwargs:
      linewidth: 2.0
      markersize: 10.
    text_kwargs:
      fontsize: 16.
    domain_type: ["all"]
    domain_name: ["CONUS"]
    data: ["airnow_RACM_ESRL", "airnow_RACM_ESRL_VCP"]
    data_proc:
      rem_obs_nan: True
      set_axis: True

  plot_grp3:
    type: "spatial_bias"
    fig_kwargs: # optional; For all spatial plots, specify map_kwargs here too.
      states: True  # such as whether to show the state boundaries
      figsize: [10, 5]
    text_kwargs:
      fontsize: 16.
    domain_type: ["all",]
    domain_name: ["CONUS"]
    data: ["airnow_RACM_ESRL", "airnow_RACM_ESRL_VCP"]
    data_proc:
      rem_obs_nan: True
      set_axis: True

  plot_grp4:
    type: "spatial_overlay"
    fig_kwargs:
      states: True
      figsize: [10, 5]
    text_kwargs:
      fontsize: 16.
    domain_type: ["all", "epa_region"]
    domain_name: ["CONUS", "R9"]
    data: ["airnow_RACM_ESRL", "airnow_RACM_ESRL_VCP"]
    data_proc:
      rem_obs_nan: True
      set_axis: True

  plot_grp5:
    type: "boxplot"
    fig_kwargs:
      figsize: [8, 6]
    text_kwargs:
      fontsize: 20.
    domain_type: ["all"]
    domain_name: ["CONUS"]
    data: ["airnow_RACM_ESRL", "airnow_RACM_ESRL_VCP"]
    data_proc:
      rem_obs_nan: True
      set_axis: False

stats:
  # Stats require positive numbers, so if you want to calculate temperature use Kelvin!
  # Wind direction has special calculations for AirNow if obs name is 'WD'
  stat_list: ["MB", "MdnB", "R2", "RMSE"]
  # ^ List stats to calculate. Dictionary of definitions included
  #   in submodule `plots/proc_stats`. Only stats listed below are currently working.
  #   Full calc list:
  #   ['STDO', 'STDP', 'MdnNB','MdnNE','NMdnGE',
  #    'NO', 'NOP', 'NP', 'MO', 'MP', 'MdnO', 'MdnP',
  #    'RM', 'RMdn', 'MB', 'MdnB', 'NMB', 'NMdnB', 'FB',
  #    'ME','MdnE','NME', 'NMdnE', 'FE', 'R2', 'RMSE','d1',
  #    'E1', 'IOA', 'AC']
  round_output: 2 # optional; defaults to rounding to 3rd decimal place
  output_table: False
  # ^ Always outputs a .txt file.
  #   Optional to also output a Matplotlib figure table (image).
  output_table_kwargs: # optional
    figsize: [7, 3]
    fontsize: 12.
    xscale: 1.4
    yscale: 1.4
    edges: "horizontal"
  domain_type: ["all"]
  domain_name: ["CONUS"]
  data: ["airnow_RACM_ESRL", "airnow_RACM_ESRL_VCP"]
